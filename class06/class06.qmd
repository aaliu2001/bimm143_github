---
title: "Class 06: R Functions"
author: "Angela Liu"
format: pdf
---

## R Functions

In this session you will work through the process of developing your own function for calculating average grades for fictional students in a fictional class.

We will start with a simplified version of the problem. Grade some vectors of student scores. We want to drop the lowest score adn get the average. 

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

We can use the `mean()` function to get the average:

```{r}
mean(student1)
```

We can find the smallest value with the `min()` function

```{r}
min(student1)

```

There is also the `which.min()` function. Let's see if this can help:
```{r}
student1
which.min(student1)
```

```{r}
#returns the value of the lowest score
#not very helpful
student1[which.min(student1)]
```

```{r}
x <- 1:5
x
```

```{r}
x[-4]
```

Let's put this together to drop the lowest value and find the mean:
```{r}
s1 <- student1[-which.min(student1)] #s1 is the vector without the lowest score
s1
mean(s1)

#putting it all together
mean(student1[-which.min(student1)])
```

Now for student2
```{r}
student2
mean(student2[-which.min(student2)])
```

```{r}
which.min(student2)
```

```{r}
student2[-which.min(student2)]
```

```{r}
mean(c(5, 5, 5, NA), na.rm=TRUE)
```

```{r}
mean(student2[-which.min(student2)], na.rm=TRUE)
```


What about student 3?
```{r}
student3
```

```{r}
mean(student3, na.rm=TRUE)
```

Not good, inflates grades as it drops all the NAs before determining the mean...

How does the function `is.na()` work?
```{r}
student3
is.na(student3)
```

```{r}
student2
is.na(student2)
```

I can use a logical vector to index another vector.

```{r}
x <- 1:5
x[x>3]
```

```{r}
student2[is.na(student2)] <- 0 #assigns 0 to NA
student2
```

```{r}
x <- student3
x[is.na(x)] <- 0
mean(x[-which.min(x)])
```


We now have our working snippet of code! This is now going to be the body of our function.

All functions in R have at least three things:

- A name (that we pick)
- input arguments
- a body (the code that does the work)


```{r}
grade <- function(x) {
  # mask NA to zero
  x[is.na(x)] <- 0
  # drop lowest value and get the mean
  mean(x[-which.min(x)])
}

```

Let's try it out
```{r}
grade(student1)
grade(student2)
grade(student3)
```



Grading an example class gradebook:

> Q1. Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adequately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]

```{r}
gradebook <- read.csv("https://tinyurl.com/gradeinput", row.names = 1)
head(gradebook)
View(gradebook)
```


We can use an `apply()` function to use existing `grade()` function on the whole class gradebook.

How does this `apply()` function work?
```{r}
#apply the function grade over gradebook (input for function) with margin 1 (for the rows) 
results <- apply(gradebook, 1, grade)
results
```

> Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook? [3pts]

```{r}
which.max(results)
```


> Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]

```{r}
which.min(apply(gradebook, 2, sum, na.rm=TRUE))
```

```{r}
#not a good way; does not use NA, so not a representative mean 
which.min(apply(gradebook, 2, mean, na.rm=TRUE))
```


If I want to use the mean approach, I will need to mask the NA (missing homework) as zero.

```{r}
mask <- gradebook
mask[is.na(mask)] <- 0
mask
```
```{r}
which.min(apply(mask, 2, mean, na.rm = TRUE))
```

Most people did not do well on homework 2. 


> Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? [1pt]

Here we are going to look at the correlation of each homework results (i.e. the columns in the gradebook) with the overall grade of students from the course (in the `results` object obtained from using our `grade()` function). 


```{r}
results
```

```{r}
mask$hw4
```

I am going to use `cor()` function:
```{r}
cor(results, mask$hw4)
```

```{r}
cor(results, mask$hw5)
```

I want to use the `apply()` function to do this over the entire gradebook.
```{r}
#can add extra arguments after function - in this case, "results"
apply(mask, 2, cor, y=results)
```

Homework 5 has the most predictive overall score

>Q5. Make sure you save your Quarto document and can click the “Render” (or Rmarkdown”Knit”) button to generate a PDF foramt report without errors. Finally, submit your PDF
to gradescope. [1pt]


